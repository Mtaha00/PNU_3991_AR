\documentclass[b5paper,‎10pt]{article}
\usepackage[fleqn]{amsmath}
‎\usepackage{amssymb,mathrsfs,amscd,mathtools,nccmath}‎
‎\usepackage{tikz}‎
‎\usetikzlibrary{arrows,automata,positioning,shapes,fit,calc}‎
‎\usepackage[top=3.2cm,right=2cm,bottom=3.5cm,left=2cm]{geometry}‎
‎\usepackage{color,graphicx}‎ ‎‎‎‎‏‎‎
\usepackage{multirow}‎
\usepackage{scrextend}‎‎
\changefontsizes[10pt]{8pt}
‎\renewcommand{\baselinestretch}{1.2}‎


‎\begin{document}‎‎
 ‎‎\textit{‎‎ \textbf{Definition:} A grammar (V_N, $‎\Sigma‎$, P, S) is called an unrestricted grammar if all its productions are in the form $LS ‎\rightarrow‎ RS‎$‎‏, where $LS ‎\in‎ (V_N ‎\cup‎ ‎\Sigma‎)+ ‎$‎‏and ‎$‎RS \in (VN ‎\cup‎ ‎\Sigma‎)^*‎$‎‏.}
‎
In an unrestricted grammar, any combination of terminal and non-terminal can appear at both ends of
the production rule. The only restriction is that the null string (‎$‎‎‎\lambda‎‎‎$‎‏) cannot appear at the left hand side of
the production rule. (Notice for LS, it is + not *.) In the Chomsky hierarchy, type 0 or unrestricted grammar
is the superset of all grammars, and thus it accepts more languages than type 1 or other grammars.‎
‎
Already it is mentioned that unrestricted grammar is accepted by the TM, and the language accepted
by a TM is called recursively enumerable language. In the following section, we shall discuss the relation
between unrestricted grammar and recursively enumerable language.‎
‎\\
\textbf{Theorem 10.1:} Any language set generated by an unrestricted grammar is recursively enumerable.‎‎‎
\\
\textbf{Proof:} Let G = (V_N, $‎\Sigma‎$, P, S) be an unrestricted grammar. A grammar defi nes a set of procedures for
enumerating all strings ‎$‎‎\in‎ L(G)‎$‎‏.‎\\
‎$‎‎\square‎$ List all w ‎$‎‎\in‎$ L(G) such that w is derived from the production rules P in one step. As S is the start
symbol, we can write that w is the set of strings derived from S in one step. Symbolically, it can be
written as ‎$‎S ‎\rightarrow‎ w‎$‎‏.‎\\
‎‎‎$\square$ List all w $\in‎$‎‏ L(G) such that w is derived from the production rules P in two steps. We can write it
as ‎$‎S ‎\rightarrow‎ x ‎\rightarrow‎ w‎$‎‏.\\‎
By the process, the derivation progresses.
‎‎‎
If S be the set of all strings, then an enumeration procedure for S is a TM that generates all strings
of S one by one in a fi nite amount of time. If, for a set, there exists an enumeration procedure, the set
is countable. The set of strings generated by an unrestricted language is countable. Thus, the derivation
procedures can be enumerated on a TM.‎
‎
Hence it is proved that the language generated by an unrestricted grammar is recursively enumerable.\\\\‎
‎{‎\large\textbf{10.2.1 Turing Machine to Unrestricted Grammar}}\\‎
‎A TM accepts type 0 languages. Type 0 language is generated by type 0 grammar. Type 0 grammar can
be constructed directly from the TM’s transitional functions. The rules are discussed in the following.‎‎
‎
Let the string to be traversed by a TM M be S which is enclosed between two end markers ‎$‎\Psi‎‎$ S $ \$ $.
Note that the IDs are enclosed within brackets. The acceptance of the string S by M means the transformation
of ID from [q_0 $\Psi$ S $\$‎$‎] to [q_f B]. Here, ‎$‎q_0‎$‎‏ is the initial state and qf is the fi nal or halt state. The
length of the ID may change if the read–write head of the TM reaches the left hand side or right hand
side brackets. Thus, the productions rules of the grammar equivalent to the transition of ID are divided
into two steps: (i) no change in length and (ii) change in length. Assume that the transition table is given
as follows.\\‎‎‎‎‎
‎‎
\begin{table}[htp]
‎\centering 
\begin{tabular}{c c c c}
     ‎‎\hline‎‎
    ‎ ‎‎\underline{‎‎Input}   &       &      &  \\
     state & a_1 &  ‎\cdots‎  &  a_j \\
     \hline‎‎
     q_1 &   &   & \\
     ‎\vdots‎  & & & \\
     q_i & & &\\
     \hline
\end{tabular}\\
\end{table}\\‎‎‎‎‎‎‎
‎\square ‎‎\textbf{‎No change in length:}‎‎‎‎‎

\quad ‎\textbf{‎-‎Right move:} If there is a transitional function‎
\begin{center}
$\delta(q_i, a_j) \rightarrow (q_k, a_l, R)$\\
\end{center}‎
‎\qquad‎‎\quad‎ of the TM, then the equivalent production rule of the grammar is‎‎
‎‎\begin{center}
$q_ia_j ‎\rightarrow‎ a_lq_k$\\
\end{center}‎‎‎‎

\quad \textbf{ -Left move:} If there is a transitional function
\begin{center}
$‎\delta‎(q_i, a_j) ‎\rightarrow‎ (q_k, a_l, L)$\\
\end{center}
\qquad\quad of the TM, then the equivalent production rule of the grammar is in the form
\begin{center}
$a_p q_i a_j →q_k a_p a_l $ for all$ a_p \in ‎\Gamma‎$\\
\end{center}‎
‎\qquad‎‎\qquad‎(If there are n allowable tape symbols, then for a left movement production n transitional‎‎‎

\qquad\quad functions are added to the production rule.)‎

\square \textbf{Change in length:}‎‎
‎
\quad‎\textbf{ -Left bracket ‘[‘ at the left end:} If there is a production
\begin{center}
$\delta(q_i, a_j) \rightarrow (q_k, a_l, L)$\\
\end{center}‎‎‎
\qquad TM going to traverse the left boundary ’[‘): then the production‎
\begin{center}
$[q_ia_j ‎\rightarrow‎ q_kBa_l$\\
\end{center}‎
\qquad is added to the production rule. (Here B represents the blank.)‎

\qquad \qquad If B appears next to the left bracket, it can be deleted by the production
\begin{center}
$[B ‎\rightarrow‎ [$\\
\end{center}
\quad\textbf{ -Right bracket ‘]‘ at the right end:} If B appears just before ‘]’, then it can be deleted by the‎

\quad production‎
\begin{center}
$a_pB] ‎\rightarrow‎ a_p] $ for all$ a_p\in ‎\Gamma‎$\\
\end{center}
\qquad\qquad If TM going to traverse to the right of ‘]’, then the length is increased due to the insertion‎

\qqaud \quad of B. The productions are
\begin{center}
$q_i] ‎\rightarrow‎ q_iB] $ for all$ q_i \in Q$\\
\end{center}‎

‎‎$‎\square‎$‎‏‎ The string is confi ned by two end markers ‎$‎‎\Psi‎ and \$‎ $‎‏ . To introduce the end markers, the following‎

productions are added.‎
\begin{center}
$[q_i ‎\Psi‎ ‎\rightarrow‎ [q_i $ for all$ q_i \in Q$\\
‎$‎a_p\$ ‎\rightarrow ‎a_p‎ $‎ for all‎$‎ a_p‎‎‏ (‎\neq‎B) \in ‎\Gamma‎$‎
\end{center}

\quad To remove brackets ‘[‘ and ‘]’ from [qfB], the following production is added,
\begin{center}
$[q_fB] ‎\rightarrow‎ S$\\
\end{center}‎

\quad Here, S is the start symbol of the grammar.\\
‎
$\square$ Now, reverse the direction of the arrow in the transitional functions. The generated production rules‎ are the production rules of the grammar. The grammar obtained in this process is called generative‎ grammar.‎‎
‎
‎Example 10.‏‎1\\‎
‎
Consider a TM with the following transitional functions. (This is the TM for 1’s complement.) Convert this to an equivalent type 0 grammar.‎
\begin{table}[htp]
\centering 
\begin{tabular}{c c c c}
     \hline
     \underline{Input}   &       &      &  \\
     state & 0 &  1  &  B \\
     \hline
     Q_0 &  Q_0,1,R &  Q_0,0,R   & Q_0,B,R  \\
     Q_f  & & & \\
     
     \hline
\end{tabular}\\
\end{table}\\‎
‎\textbf{‎ Solution:}‎‎‎

i) For the transitional function ‎$‎‎\delta ‎(Q_0, 0) ‎\rightarrow‎ (Q_0, 1, R)‎$‎‏, the production rule is
\begin{center}
$Q_00 \rightarrow 1Q_0$\\
\end{center}‎‎

For transitional function ‎$‎‎\delta‎ (Q_0, 1) ‎\rightarrow‎ (-Q0, 0, R)‎$‎‏, the production rule is
\begin{center}
$Q_01 \rightarrow 0Q_0$\\
\end{center}‎‎

For transitional function $\delta (Q_0, B) ‎\rightarrow‎ (Q_f, B, R)‎$‎‏, the production rule is
\begin{center}
$Q_0B \rightarrow 0Q_f$\\
\end{center}‎‎

ii) The production rule corresponding to the left end is
\begin{center}
$[B ‎\rightarrow‎ [$\\
\end{center}‎

The production rules corresponding to the right end are
‎\begin{center}
$0B]\rightarrow 0] 1B]\rightarrow 1] BB] \rightarrow B] ‎$‎[for tape symbols]‎‎‏\\
$Q_0] \rightarrow Q_0B] Q1] \rightarrow Q_1B]‎$‎‏\\
\end{center}
‎
iii) The production rules for introducing end markers are
\begin{center}
$[Q_0‎\Psi‎ ‎\rightarrow‎ [Q_0 [Q_f‎\Psi‎ ‎\rightarrow‎ [Q_f$\\‎
‎$‎0\$‎\rightarrow‎ 0 1\$ ‎\rightarrow‎ 1$ [B is excluded]\\‎
‎$‎[Q_fB] ‎\rightarrow‎ S $‎\\‎‏
\end{center}‎
‎
By reversing the direction of the arrow, the productions become‎
\begin{center}
$S ‎\rightarrow‎ [Q_f B], 1 \rightarrow 1\$ , 0 \rightarrow 0\$ $\\‎
‎$[Q_0 \rightarrow[Q_0ψ, [Q_f \rightarrow[Q_fψ, Q_1B] \rightarrow Q_1]‎$‎\\
‎$Q_0B] \rightarrow Q_0], B] \rightarrow BB], 1] \rightarrow 1B]‎$‎‏‎\\
‎$0] \rightarrow 0B], [ \rightarrow [B, 0Qf \rightarrow Q_0B‎$‎\\
‎$0Q_0 \rightarrow Q_01 1Q_0 \rightarrow Q_00‎$‎‏‎‏‎\\‏
\end{center}
‎
Example 10.2\\‎

\quad Consider a TM with the following transitional functions. (This is the TM which accepts an even string of ‘a’.) Convert this to an equivalent type 0 grammar. Check it for the string ‘aa’.
‎\begin{table}[htp]
\centering 
\begin{tabular}{c c c }
     \hline
     \underline{Input}   &       &        \\
     state & A  &  B \\
     \hline
     Q_0 &  Q_1,B,R &  \\
     Q_1  & Q_1,B,R & \\
     \hline
\end{tabular}\\
\end{table}\\
‎where Q0 is the initial and fi nal state.
‎‎\textbf{‎Solution:}\\‎
‎
i) For transitional function δ(Q0, a) → (Q1, B, R), the production rule is‎
\begin{center}
$[B \rightarrow [$\\
‎‎$‎‏Q_0 a \rightarrow BQ_1‎‎$‎\\
\end{center}
For the second transitional function δ(Q1, a) → (Q0, B, R), the production rule is‎
\begin{center}
$Q_1 a \rightarrow BQ_0‎$‎‏\\
\end{center}‎

ii) The production rule corresponding to the left end is‎

\begin{center}
$[B \rightarrow [$\\
\end{center}‎
The production rules corresponding to the right end are
\begin{center}
$aB] \rightarrow a] BB] \rightarrow B] ‎$‎‏[for tape symbols]‎‎‏\\
$Q_0] \rightarrow Q_0B] Q_1] \rightarrow Q_1B]$\\
\end{center}‎‎

iii) The production rules for introducing end markers are‎‎

\begin{center}
$‎[Q_0\Psi → [Q0 [Q_1\Psi \rightarrow [Q_1$‎‏\\
$a\$ → a [B $is excluded]‎‎‏\\
‎$‎[Q_0B] \rightarrow S$\\
\end{center}

By reversing the direction of the arrow, the productions become
\begin{center}
$BQ_1 \rightarrow Q_0a BQ_0 \rightarrow Q_1a$\\
$‎[\rightarrow [Ba] \rightarrow aB]$‎‏\\
$B] \rightarrow BB] Q+0B] \rightarrow Q_0]$\\‎
$Q_1B] \rightarrow Q_1] [Q_0 \rightarrow [Q_0\Psi$\\
$[Q_1 \rightarrow [Q_1\Psi a \rightarrow a\$$\\
$S \rightarrow [Q_0B]$\\
\end{center}‎

Checking: The string is ‘aa’. It means from S we have to produce ‎$‎[Q_0‎\Psi‎ aa\$]‎$‎‏.‎
\begin{center}
$S \rightarrow [Q_0B]$\\
$\rightarrow [Q_0] (As Q_0B] \rightarrow Q_0])$\
$\rightarrow [BQ_0] (As [ \rightarrow [B)$\\
\end{center}



\end{document}